@use 'sass:math';

/**
 * Table of Contents
 *
 * to-fixed()
 * decimal-to-hexadecimal()
 */

/**
 * @function to-fixed
 *
 * Converts a number to a fixed-point representation.
 * @since 1.0.0
 *
 * @param {number} $number - The number to convert.
 * @param {number} $places [0] - The number of decimal places to round to.
 *
 * @return {number} - The fixed-point representation of the number.
 */
 @function to-fixed($number, $places: 0) {
   $n: 1;
   @if $places > 0 {
      @for $i from 1 through $places {
           $n: $n * 10;
      }
   }
   @return math.div(math.round($number * $n), $n);
}

/**
 * @function decimal-to-hexadecimal
 *
 * Converts a decimal number to its hexadecimal representation.
 * Only supports numbers between 0 and 255.
 * @since 1.0.0
 *
 * @param {number} $number - The decimal number to convert.
 *
 * @return {string} - The hexadecimal representation of the decimal number.
 */
@function decimal-to-hexadecimal($number) {
   $hex-map: (
      0: "0",
      1: "1",
      2: "2",
      3: "3",
      4: "4",
      5: "5",
      6: "6",
      7: "7",
      8: "8",
      9: "9",
      10: "A",
      11: "B",
      12: "C",
      13: "D",
      14: "E",
      15: "F"
   );

   $Q1: math.floor(math.div($number, 16));
   $R1: $number - ($Q1 * 16);

   $Q2: math.floor(math.div($Q1, 16));
   $R2: $Q1 - ($Q2 * 16);

   $R1: map.get($hex-map, math.floor($R1));
   $R2: map.get($hex-map, math.floor($R2));

   @return #{$R2}#{$R1};
}